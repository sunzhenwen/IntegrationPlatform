package com.webservice.client.constructor;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * This class was generated by Apache CXF 2.7.16
 * 2016-04-29T14:56:19.574+08:00
 * Generated source version: 2.7.16
 * 
 */
@WebServiceClient(name = "TJWebService", 
                  wsdlLocation = "http://192.20.1.43:9090/TJWebService.asmx?wsdl",
                  targetNamespace = "http://tempuri.org/") 
public class TJWebService extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://tempuri.org/", "TJWebService");
    public final static QName TJWebServiceSoap = new QName("http://tempuri.org/", "TJWebServiceSoap");
    public final static QName TJWebServiceSoap12 = new QName("http://tempuri.org/", "TJWebServiceSoap12");
    public final static QName TJWebServiceHttpPost = new QName("http://tempuri.org/", "TJWebServiceHttpPost");
    public final static QName TJWebServiceHttpGet = new QName("http://tempuri.org/", "TJWebServiceHttpGet");
    static {
        URL url = null;
        try {
            url = new URL("http://192.20.1.43:9090/TJWebService.asmx?wsdl");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(TJWebService.class.getName())
                .log(java.util.logging.Level.INFO, 
                     "Can not initialize the default wsdl from {0}", "http://192.20.1.43:9090/TJWebService.asmx?wsdl");
        }
        WSDL_LOCATION = url;
    }

    public TJWebService(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public TJWebService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public TJWebService() {
        super(WSDL_LOCATION, SERVICE);
    }
    
    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public TJWebService(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public TJWebService(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public TJWebService(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }

    /**
     *
     * @return
     *     returns TJWebServiceSoap
     */
    @WebEndpoint(name = "TJWebServiceSoap")
    public TJWebServiceSoap getTJWebServiceSoap() {
        return super.getPort(TJWebServiceSoap, TJWebServiceSoap.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns TJWebServiceSoap
     */
    @WebEndpoint(name = "TJWebServiceSoap")
    public TJWebServiceSoap getTJWebServiceSoap(WebServiceFeature... features) {
        return super.getPort(TJWebServiceSoap, TJWebServiceSoap.class, features);
    }
    /**
     *
     * @return
     *     returns TJWebServiceSoap
     */
    @WebEndpoint(name = "TJWebServiceSoap12")
    public TJWebServiceSoap getTJWebServiceSoap12() {
        return super.getPort(TJWebServiceSoap12, TJWebServiceSoap.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns TJWebServiceSoap
     */
    @WebEndpoint(name = "TJWebServiceSoap12")
    public TJWebServiceSoap getTJWebServiceSoap12(WebServiceFeature... features) {
        return super.getPort(TJWebServiceSoap12, TJWebServiceSoap.class, features);
    }
    /**
     *
     * @return
     *     returns TJWebServiceHttpPost
     */
    @WebEndpoint(name = "TJWebServiceHttpPost")
    public TJWebServiceHttpPost getTJWebServiceHttpPost() {
        return super.getPort(TJWebServiceHttpPost, TJWebServiceHttpPost.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns TJWebServiceHttpPost
     */
    @WebEndpoint(name = "TJWebServiceHttpPost")
    public TJWebServiceHttpPost getTJWebServiceHttpPost(WebServiceFeature... features) {
        return super.getPort(TJWebServiceHttpPost, TJWebServiceHttpPost.class, features);
    }
    /**
     *
     * @return
     *     returns TJWebServiceHttpGet
     */
    @WebEndpoint(name = "TJWebServiceHttpGet")
    public TJWebServiceHttpGet getTJWebServiceHttpGet() {
        return super.getPort(TJWebServiceHttpGet, TJWebServiceHttpGet.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns TJWebServiceHttpGet
     */
    @WebEndpoint(name = "TJWebServiceHttpGet")
    public TJWebServiceHttpGet getTJWebServiceHttpGet(WebServiceFeature... features) {
        return super.getPort(TJWebServiceHttpGet, TJWebServiceHttpGet.class, features);
    }

}
